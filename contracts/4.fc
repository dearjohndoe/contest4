{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  var result = begin_cell();
  slice s = text.begin_parse();
  s~load_uint(32);
  int first_char = s~load_uint(8);
  while (~ s.slice_empty?()) {
    int char = s~load_uint(8);
    char = (char + shift) % 256;
    result~store_uint(char, 8);
  }

  result~store_uint((first_char + shift) % 256, 8);

  cell c = result.end_cell();
  ~strdump(c.begin_parse());

  return c;
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  var result = begin_cell();
  slice s = text.begin_parse();
  s~load_uint(32);
  while (s.slice_bits() > 8) {
    int char = s~load_uint(8);
    char = (char - shift) % 256;
    result~store_uint(char, 8);
  }

  cell c = result.end_cell();
  slice cs = c.begin_parse();

  int last_char = s~load_uint(8);
  var result2 = begin_cell();
  result2~store_uint((last_char - shift) % 256, 8);
  int bits = cs.slice_bits();
  result2~store_uint(cs~load_uint(bits), bits);

  cell final = result2.end_cell();
  ~strdump(final.begin_parse());

  return final;
}

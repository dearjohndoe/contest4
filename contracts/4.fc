{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

int crypt_char(int shift, int char) {
  if (char > 64) {
    if (char < 91) {
      char = (char + shift) % 256;

      if (char >= 91) {
        char = 64 + char - 91 + 1;
      }
      if (char <= 64) {
        char = 91 - (64 - char) - 1;
      }
    }
  }
  if (char > 96) {
    if (char < 123) {
      char = (char + shift) % 256;

      if (char >= 123) {
        char = 96 + char - 123 + 1;
      }
      if (char <= 96) {
        char = 123 - (96 - char) - 1;
      }
    }
  }

  return char;
}

cell rec_enc(int shift, int first_symbol, cell text) {
  var encrypted = begin_cell();
  slice sc = text.begin_parse();

  if (first_symbol == -1) {
    sc~load_uint(32);
    encrypted~store_uint(0, 32);
  }

  ;; do base encrypt
  while (sc.slice_bits() >= 8) {
    encrypted~store_uint(crypt_char(shift, sc~load_uint(8)), 8);
  }

  ;; check tail
  if (~ sc.slice_refs_empty?()) {
    cell tail = rec_enc(shift, 0, sc~load_ref());
    encrypted = store_ref(encrypted, tail);
  }

  ;; debug
  cell c = encrypted.end_cell();
  ~strdump("enc");
  ~dump(shift);
  ~strdump(c.begin_parse());

  return c;
}

cell rec_dec(int shift, int first_for_current, cell text) {
  var decrypted = begin_cell();

  slice sc = text.begin_parse();
  if (first_for_current == -1) {
    sc~load_uint(32);
    decrypted~store_uint(0, 32);
  }
  
  ;; rec if has
  if (~ sc.slice_refs_empty?()) {
    cell tail = rec_dec(shift, 0, sc~load_ref());
    decrypted = store_ref(decrypted, tail);
  }

  ;; dec
  while (sc.slice_bits() >= 8) {    ;; probably 8
    decrypted~store_uint(crypt_char(shift, sc~load_uint(8)), 8);
  }

  ;; debug
  cell c = decrypted.end_cell();
  ~strdump("dec");
  ~dump(shift);
  ~strdump(c.begin_parse());

  return c;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  return rec_enc(shift, -1, text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  shift = - shift;
  return rec_dec(shift, -1, text);
}
